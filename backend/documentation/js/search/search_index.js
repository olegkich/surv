var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Answer.html",[0,0.141,1,1.545]],["body/classes/Answer.html",[0,0.105,1,1.704,2,0.74,3,0.194,4,0.169,5,0.169,6,1.831,7,1.36,8,1.508,9,0.277,10,0.819,11,2.899,12,1.488,13,2.246,14,2.132,15,2.08,16,1.6,17,1.793,18,0.8,19,0.028,20,1.37,21,2.234,22,2.2,23,2.2,24,1.464,25,1.336,26,2.061,27,1.25,28,2.481,29,2.894,30,2.481,31,2.428,32,2.481,33,2.481,34,2.481,35,2.481,36,2.481,37,2.481,38,0.541,39,2.246,40,1.744,41,0.987,42,2.246,43,1.36,44,0.853,45,0.853,46,1.355,47,1.638,48,1.638,49,0.64,50,1.638,51,0.987,52,1.484,53,0.194,54,1.464,55,0.015,56,0.015]],["title/classes/Answer-1.html",[0,0.118,1,1.293,57,2.059]],["body/classes/Answer-1.html",[0,0.21,1,2.71,2,1.481,3,0.389,4,0.338,5,0.338,19,0.025,53,0.389,55,0.024,56,0.024,58,4.183]],["title/interfaces/AnswerCreationAttrs.html",[49,0.861,50,2.201]],["body/interfaces/AnswerCreationAttrs.html",[0,0.123,1,1.35,3,0.228,4,0.198,5,0.198,6,2.15,7,1.078,8,1.422,9,0.325,10,0.921,11,3.302,12,1.425,13,2.558,14,2.042,15,2.368,16,1.532,17,2.042,18,0.779,19,0.028,20,1.453,24,1.16,25,1.24,26,1.912,38,0.583,39,2.423,40,1.912,41,1.16,42,2.423,43,1.529,44,1.003,45,1.003,46,1.592,47,1.924,48,1.924,49,0.752,50,2.729,51,1.16,52,1.743,53,0.228,54,1.645,55,0.017,56,0.017,59,1.592]],["title/classes/AnswerType.html",[0,0.141,60,2.201]],["body/classes/AnswerType.html",[0,0.221,2,1.234,3,0.324,4,0.282,5,0.282,9,0.462,10,1.165,11,3.431,13,2.658,15,1.775,17,1.53,18,0.71,19,0.027,20,1.414,27,1.165,52,2.475,53,0.324,55,0.021,56,0.021,60,3.787,61,4.233,62,3.054,63,4.138,64,4.138,65,2.261]],["title/controllers/AnswersController.html",[66,1.674,67,2.201]],["body/controllers/AnswersController.html",[0,0.125,3,0.232,4,0.202,5,0.202,9,0.331,15,2.473,17,1.547,18,0.659,19,0.028,20,1.371,21,1.93,27,1.08,38,0.541,52,1.773,53,0.232,55,0.017,56,0.017,65,3.15,66,1.488,67,2.762,68,1.373,69,2.496,70,2.187,71,2.101,72,2.101,73,3.087,74,3.201,75,2.496,76,3.578,77,2.964,78,2.435,79,1.345,80,2.247,81,2.435,82,2.964,83,2.964,84,2.496,85,3.523,86,2.964,87,2.187,88,2.187,89,2.187,90,1.02,91,2.649,92,2.496,93,1.957,94,2.496,95,2.964,96,1.957,97,2.187,98,2.187,99,2.247,100,2.964,101,2.964,102,2.964,103,2.964,104,2.964,105,2.964]],["title/modules/AnswersModule.html",[106,1.545,107,1.994]],["body/modules/AnswersModule.html",[0,0.161,1,1.766,3,0.299,4,0.259,5,0.259,19,0.028,38,0.676,53,0.299,55,0.02,56,0.02,67,3.642,68,2.299,90,1.311,91,3.395,92,3.209,106,2.299,107,3.716,108,1.913,109,2.491,110,3.209,111,3.209,112,2.968,113,2.279,114,2.279,115,3.811,116,3.276,117,3.811,118,2.516,119,1.766,120,3.209,121,2.516,122,3.811]],["title/injectables/AnswersService.html",[91,1.822,123,1.545]],["body/injectables/AnswersService.html",[0,0.111,1,2.106,3,0.207,4,0.18,5,0.18,8,0.908,9,0.294,11,1.578,13,1.223,15,2.456,17,1.681,18,0.617,19,0.028,20,1.333,27,1.112,38,0.592,53,0.207,55,0.016,56,0.016,65,2.902,71,1.933,72,1.933,74,2.541,75,3.241,78,2.508,79,1.386,80,2.314,81,2.282,84,3.241,90,0.908,91,2.103,93,1.742,94,2.222,99,1.784,119,1.223,120,2.222,123,1.784,124,1.742,125,2.222,126,4.091,127,3.85,128,1.742,129,2.639,130,2.639,131,3.85,132,2.639,133,3.85,134,2.639,135,1.742,136,2.639,137,1.948,138,1.808,139,1.948,140,2.639,141,1.948,142,1.948,143,3.353,144,2.639,145,2.639,146,2.639,147,2.639,148,2.639,149,2.639,150,2.639,151,2.222,152,2.222,153,2.639]],["title/modules/AppModule.html",[106,1.545,154,2.201]],["body/modules/AppModule.html",[0,0.125,3,0.233,4,0.202,5,0.202,12,1.083,14,1.551,16,1.164,19,0.028,25,1.083,38,0.696,53,0.233,55,0.017,56,0.017,68,1.378,90,1.023,106,1.943,107,3.452,108,1.493,109,2.106,112,2.508,113,1.779,114,1.779,116,1.963,118,1.963,119,1.378,121,2.769,138,1.669,154,4.121,155,2.504,156,2.504,157,3.452,158,3.452,159,2.974,160,2.974,161,2.974,162,2.974,163,2.195,164,3.531,165,2.974,166,2.974,167,2.974,168,2.974,169,2.974,170,2.974,171,2.504,172,2.974,173,2.974,174,2.974,175,2.974,176,2.974,177,2.974,178,1.779,179,2.974,180,2.974,181,2.974,182,2.974,183,2.974,184,2.974]],["title/classes/CreateAnswerDto.html",[0,0.141,65,1.822]],["body/classes/CreateAnswerDto.html",[0,0.215,2,1.188,3,0.312,4,0.271,5,0.271,9,0.445,10,1.138,11,2.384,13,1.847,15,2.418,17,2.085,18,0.766,19,0.027,20,1.401,27,1.256,52,3.371,53,0.312,55,0.021,56,0.021,60,3.721,61,4.387,62,2.941,65,2.791,185,3.986,186,3.986,187,3.986]],["title/classes/CreateSurveyDto.html",[0,0.141,188,1.674]],["body/classes/CreateSurveyDto.html",[0,0.244,2,0.992,3,0.261,4,0.226,5,0.226,9,0.371,10,1.01,12,0.859,17,1.907,18,0.787,19,0.028,20,1.01,21,2.052,25,0.859,27,1.149,38,0.506,53,0.404,55,0.019,56,0.019,79,1.431,188,2.276,189,2.197,190,2.817,191,1.782,192,3.404,193,3.328,194,3.025,195,3.328,196,3.328,197,3.328,198,3.805,199,3.328,200,2.197,201,2.456,202,2.456,203,3.346,204,1.99,205,2.456,206,2.456,207,2.456,208,1.671,209,2.197,210,2.456,211,1.542]],["title/classes/CreateUserDto.html",[0,0.141,212,1.822]],["body/classes/CreateUserDto.html",[0,0.201,2,1.066,3,0.28,4,0.243,5,0.243,9,0.399,10,1.06,18,0.726,19,0.027,21,2.128,27,1.191,38,0.399,53,0.28,55,0.019,56,0.019,79,1.484,178,3.198,191,1.82,192,3.763,204,2.138,212,2.6,213,4.8,214,2.638,215,3.53,216,3.946,217,3.575,218,3.575,219,4.006,220,4.758,221,4.758,222,4.758,223,4.758,224,3.575,225,3.575,226,3.575,227,3.575]],["title/classes/FindAllSurveyDto.html",[0,0.141,208,1.674]],["body/classes/FindAllSurveyDto.html",[0,0.249,2,1.044,3,0.274,4,0.238,5,0.238,9,0.391,10,1.045,12,0.904,17,1.295,18,0.768,19,0.027,20,0.78,25,0.904,27,1.045,38,0.523,53,0.415,55,0.019,56,0.019,79,0.972,80,2.62,188,1.759,189,2.312,190,1.914,191,1.848,192,3.098,194,2.892,198,3.463,200,2.312,201,2.585,202,2.585,203,3.463,204,2.095,205,2.585,206,2.585,207,2.585,208,2.357,209,3.494,210,3.906,211,1.623,228,3.503,229,3.503]],["title/guards/JwtUserGuard.html",[230,2.46,231,2.201]],["body/guards/JwtUserGuard.html",[0,0.119,3,0.221,4,0.192,5,0.192,9,0.314,16,1.429,18,0.548,19,0.028,25,0.728,27,0.899,38,0.526,53,0.221,55,0.017,56,0.017,57,2.081,71,2.027,78,2.027,79,1.12,80,1.871,81,1.416,90,0.97,96,1.861,99,1.306,123,1.871,128,1.861,219,3.4,231,2.666,232,2.82,233,2.374,234,5.451,235,2.82,236,4.776,237,2.82,238,2.82,239,4.337,240,2.82,241,4.038,242,4.038,243,4.038,244,4.718,245,4.718,246,1.686,247,2.374,248,2.82,249,2.82,250,3.598,251,2.82,252,2.82,253,2.82,254,2.82,255,4.718,256,4.038,257,2.374,258,3.4,259,3.4,260,2.98,261,4.038,262,2.82,263,2.081,264,2.081,265,2.82,266,2.82,267,2.82,268,2.82,269,2.82]],["title/classes/Option.html",[0,0.141,138,1.327]],["body/classes/Option.html",[0,0.126,2,0.89,3,0.234,4,0.203,5,0.203,7,1.555,8,1.674,9,0.333,10,0.936,12,1.565,13,2.448,18,0.785,19,0.027,20,1.241,21,2.103,22,2.514,23,2.514,24,1.673,25,1.492,26,1.673,27,1.177,29,1.97,31,1.97,38,0.469,39,1.948,40,1.937,41,1.188,42,1.948,43,1.555,44,1.027,45,1.027,46,1.631,49,0.77,51,1.188,53,0.234,54,1.188,55,0.017,56,0.017,138,2.3,191,1.451,211,1.383,270,2.202,271,1.8,272,1.948,273,2.985,274,1.948,275,1.948,276,2.985,277,2.985,278,2.985,279,1.97,280,1.383]],["title/interfaces/OptionCreationAttrs.html",[49,0.861,279,2.201]],["body/interfaces/OptionCreationAttrs.html",[0,0.145,3,0.269,4,0.234,5,0.234,7,1.27,8,1.593,9,0.383,10,1.031,12,1.512,13,2.713,18,0.762,19,0.027,20,1.304,24,1.366,25,1.353,26,1.366,38,0.516,39,2.146,40,2.085,41,1.366,42,2.146,43,1.713,44,1.181,45,1.181,46,1.876,49,0.886,51,1.366,53,0.269,54,1.366,55,0.019,56,0.019,59,1.876,138,2.401,191,1.672,211,1.591,270,2.534,271,1.27,272,1.591,274,1.591,275,1.591,279,3.057,280,1.591]],["title/classes/Question.html",[0,0.141,12,0.861]],["body/classes/Question.html",[0,0.117,2,0.83,3,0.218,4,0.189,5,0.189,7,1.48,8,1.611,9,0.31,10,0.891,12,1.458,14,2.202,15,2.196,18,0.79,19,0.028,20,1.208,21,2.159,22,2.393,23,2.393,24,1.592,25,1.458,26,1.592,27,1.208,29,1.837,31,1.837,38,0.522,39,1.854,40,1.864,41,1.108,42,1.854,43,1.48,44,0.958,45,0.958,47,1.837,49,0.718,51,1.108,53,0.218,54,1.108,55,0.016,56,0.016,138,2.038,190,1.521,191,1.396,211,2.17,271,1.732,272,1.854,274,1.854,275,1.854,280,1.29,281,2.054,282,2.783,283,2.344,284,2.783,285,2.783,286,2.783,287,2.783,288,2.641,289,2.344,290,1.837]],["title/interfaces/QuestionCreationAttrs.html",[49,0.861,290,2.201]],["body/interfaces/QuestionCreationAttrs.html",[0,0.139,3,0.258,4,0.224,5,0.224,7,1.217,8,1.548,9,0.367,10,1.002,12,1.538,14,2.134,15,2.475,18,0.748,19,0.028,20,1.285,24,1.309,25,1.323,26,1.309,38,0.572,39,2.084,40,2.04,41,1.309,42,2.084,43,1.664,44,1.132,45,1.132,47,2.172,49,0.849,51,1.309,53,0.258,54,1.309,55,0.018,56,0.018,59,1.798,138,2.04,190,1.798,191,1.643,211,1.525,271,1.217,272,1.525,274,1.525,275,1.525,280,1.525,281,2.428,288,2.97,289,2.77,290,2.97]],["title/classes/QuestionType.html",[0,0.141,194,1.822]],["body/classes/QuestionType.html",[0,0.25,2,1.061,3,0.279,4,0.242,5,0.242,9,0.397,10,1.057,12,1.378,17,1.317,18,0.773,19,0.027,20,0.793,25,0.919,27,1.057,38,0.529,53,0.418,55,0.019,56,0.019,79,0.988,188,1.788,189,2.35,190,1.945,191,1.855,192,3.132,194,3.11,198,3.501,200,2.35,201,2.627,202,2.627,203,3.501,204,2.129,205,2.627,206,2.627,207,2.627,208,1.788,209,2.35,210,2.627,211,2.473,291,3.561,292,3.561]],["title/classes/Survey.html",[0,0.141,14,1.233]],["body/classes/Survey.html",[0,0.118,2,0.835,3,0.219,4,0.191,5,0.191,7,1.486,8,1.617,9,0.312,10,0.895,12,1.505,14,1.486,16,1.655,17,1.738,18,0.792,19,0.028,20,1.144,21,2.164,22,2.404,23,2.404,24,1.599,25,1.461,26,1.599,27,1.211,29,1.849,31,1.849,38,0.524,39,1.862,40,1.871,41,1.115,42,1.862,43,1.486,44,0.964,45,0.964,46,1.531,48,1.849,49,0.723,51,1.115,53,0.219,54,1.115,55,0.016,56,0.016,79,1.425,191,1.401,271,1.738,272,1.862,274,1.862,275,1.862,280,1.298,283,2.359,288,2.653,293,2.067,294,2.801,295,2.801,296,2.801,297,2.801,298,2.801,299,1.849,300,2.067]],["title/interfaces/SurveyCreationAttrs.html",[49,0.861,299,2.201]],["body/interfaces/SurveyCreationAttrs.html",[0,0.144,3,0.267,4,0.232,5,0.232,7,1.26,8,1.585,9,0.38,10,1.026,12,1.443,14,1.26,16,1.62,17,1.26,18,0.709,19,0.028,20,1.026,24,1.356,25,1.347,26,1.356,38,0.582,39,2.134,40,2.077,41,1.356,42,2.134,43,1.704,44,1.172,45,1.172,46,1.861,48,2.249,49,0.879,51,1.356,53,0.267,54,1.356,55,0.019,56,0.019,59,1.861,79,1.62,191,1.667,271,1.26,272,1.578,274,1.578,275,1.578,280,1.578,288,3.041,293,2.514,299,3.041,300,2.514]],["title/controllers/SurveysController.html",[66,1.674,301,2.201]],["body/controllers/SurveysController.html",[0,0.111,3,0.207,4,0.18,5,0.18,9,0.294,16,1.474,18,0.678,19,0.028,21,1.988,27,1.112,38,0.592,53,0.207,55,0.016,56,0.016,66,1.325,68,1.223,70,1.948,71,1.933,72,1.933,73,2.841,74,2.541,76,2.841,78,2.508,79,1.386,80,2.314,81,2.508,85,3.241,87,1.948,88,1.948,89,1.948,90,0.908,96,1.742,97,1.948,98,1.948,99,2.314,188,2.784,191,1.653,208,2.784,231,1.742,271,1.847,300,1.948,301,2.541,302,2.222,303,3.241,304,2.222,305,2.639,306,2.639,307,2.639,308,2.639,309,2.222,310,3.85,311,2.639,312,2.222,313,2.639,314,2.639,315,2.483,316,2.222,317,2.222,318,1.948,319,2.639,320,2.639,321,2.639,322,2.639,323,2.639,324,2.222,325,2.639,326,2.639,327,2.639,328,2.639,329,2.639,330,2.639,331,2.639]],["title/modules/SurveysModule.html",[106,1.545,157,1.994]],["body/modules/SurveysModule.html",[0,0.149,3,0.277,4,0.24,5,0.24,12,1.218,14,1.306,19,0.028,38,0.704,53,0.277,55,0.019,56,0.019,68,2.187,90,1.215,106,2.187,108,1.773,109,2.369,112,2.822,113,2.112,114,2.112,116,3.115,118,2.331,119,1.636,121,2.331,138,1.878,139,2.606,157,3.638,246,2.112,301,3.509,315,3.323,316,2.974,332,2.974,333,2.974,334,3.532,335,3.532,336,2.974,337,2.974,338,3.973,339,3.532]],["title/injectables/SurveysService.html",[123,1.545,315,1.822]],["body/injectables/SurveysService.html",[0,0.074,3,0.137,4,0.119,5,0.119,8,1.387,9,0.196,12,1.041,13,0.812,14,1.632,15,1.511,16,1.119,18,0.547,19,0.028,20,1.049,25,0.909,27,0.983,38,0.552,53,0.137,55,0.012,56,0.012,71,1.412,72,1.412,73,2.076,74,1.857,78,2.216,79,1.657,80,2.045,81,2.024,90,0.603,99,2.294,119,0.812,123,1.303,124,1.157,126,3.917,128,1.857,135,2.325,137,1.294,138,1.756,139,1.294,141,2.599,142,2.599,143,3.917,151,3.394,152,4.168,188,2.216,190,1.537,191,0.523,194,1.537,208,2.024,209,1.157,211,0.812,250,2.661,271,1.903,303,2.369,304,2.369,309,2.369,312,2.369,315,1.537,317,1.476,336,1.476,337,1.476,340,1.476,341,1.753,342,3.523,343,3.523,344,1.753,345,2.813,346,1.753,347,2.813,348,1.753,349,1.753,350,1.753,351,1.753,352,1.753,353,1.753,354,1.753,355,1.753,356,1.753,357,1.753,358,1.753,359,1.753,360,3.523,361,1.753,362,1.753,363,1.753,364,4.031,365,4.031,366,4.031,367,2.813,368,1.753,369,1.753,370,1.753,371,1.753,372,1.753]],["title/classes/UpdateUserDto.html",[0,0.141,373,2.201]],["body/classes/UpdateUserDto.html",[0,0.193,2,1.364,3,0.358,4,0.311,5,0.311,7,1.692,19,0.027,38,0.621,53,0.358,55,0.023,56,0.023,72,2.297,212,2.5,214,3.376,373,3.675,374,3.852,375,4.575,376,3.852,377,3.852,378,3.376,379,4.575]],["title/classes/User.html",[0,0.141,16,0.925]],["body/classes/User.html",[0,0.115,2,0.814,3,0.214,4,0.186,5,0.186,7,1.459,8,1.594,9,0.305,10,0.879,16,1.095,18,0.804,19,0.027,20,0.879,21,2.02,22,3.035,23,3.22,24,2.233,25,1.582,26,1.57,27,1.13,38,0.305,40,2.142,41,1.087,43,1.459,44,0.939,45,0.939,49,0.705,51,1.087,53,0.214,54,1.087,55,0.016,56,0.016,79,1.408,178,3.035,191,1.799,215,3.554,216,2.015,271,1.713,272,1.828,274,2.6,275,2.6,280,2.147,380,2.015,381,3.323,382,2.731,383,2.731,384,2.731,385,2.731,386,1.803,387,2.015,388,2.299,389,2.299,390,2.299]],["title/interfaces/UserCreatingAttrs.html",[49,0.861,386,2.201]],["body/interfaces/UserCreatingAttrs.html",[0,0.133,3,0.247,4,0.215,5,0.215,7,1.168,8,1.505,9,0.352,10,0.974,16,0.876,18,0.819,19,0.027,20,0.703,24,1.997,25,1.468,26,1.257,38,0.352,40,2.263,41,1.257,43,1.618,44,1.087,45,1.087,49,0.815,51,1.257,53,0.247,54,1.257,55,0.018,56,0.018,59,1.726,79,1.578,178,3.401,191,1.919,215,3.884,216,2.331,271,1.168,272,1.463,274,2.325,275,2.325,280,2.325,380,2.331,381,2.659,386,2.887,387,2.331,388,2.659,389,2.659,390,2.659]],["title/controllers/UsersController.html",[66,1.674,391,2.201]],["body/controllers/UsersController.html",[0,0.138,3,0.256,4,0.222,5,0.222,9,0.364,18,0.608,19,0.028,21,1.781,27,0.997,38,0.613,53,0.256,55,0.018,56,0.018,66,1.64,68,1.513,70,2.41,71,2.247,72,2.247,76,2.41,78,2.247,79,1.242,80,2.074,81,2.247,87,2.41,88,2.41,89,2.41,90,1.123,93,2.156,96,2.156,97,2.41,98,2.41,99,2.074,212,3.509,373,2.156,378,3.302,387,2.41,391,2.954,392,2.75,393,3.768,394,2.75,395,4.476,396,3.266,397,2.75,398,4.476,399,3.266,400,3.266,401,2.79,402,2.75,403,3.266,404,3.266,405,3.266,406,3.266,407,3.266]],["title/modules/UsersModule.html",[106,1.545,158,1.994]],["body/modules/UsersModule.html",[0,0.149,3,0.277,4,0.24,5,0.24,16,0.98,19,0.028,38,0.678,53,0.277,55,0.019,56,0.019,68,2.187,90,1.215,106,2.187,108,1.773,109,2.369,112,2.822,113,2.112,114,2.112,116,3.115,118,2.331,119,1.636,121,2.331,158,3.638,163,2.606,246,2.112,263,2.606,264,2.606,338,3.973,391,3.509,401,3.323,402,2.974,408,2.974,409,2.974,410,3.532,411,3.532,412,3.532,413,3.532,414,3.532,415,3.532,416,3.532,417,3.532]],["title/injectables/UsersService.html",[123,1.545,401,1.822]],["body/injectables/UsersService.html",[0,0.087,3,0.162,4,0.141,5,0.141,9,0.231,16,1.587,18,0.601,19,0.028,27,0.985,38,0.589,44,0.713,53,0.162,55,0.013,56,0.013,71,1.611,72,1.611,78,2.22,79,1.464,80,2.049,81,1.972,90,0.713,93,1.368,99,1.82,119,0.96,123,1.487,124,1.368,126,3.733,128,2.118,135,2.118,137,1.529,141,2.368,142,1.529,143,3.733,163,1.529,178,1.239,212,3.058,215,2.592,236,4.443,246,1.239,250,3.599,258,3.723,259,3.306,260,2.898,263,1.529,264,1.529,271,0.766,324,1.744,378,1.529,393,2.702,394,2.702,397,2.702,401,1.753,418,1.744,419,3.209,420,2.072,421,2.072,422,3.209,423,2.072,424,3.209,425,2.072,426,2.072,427,2.072,428,2.072,429,2.702,430,2.072,431,2.072,432,3.209,433,3.209,434,3.209,435,3.209,436,3.209,437,3.209,438,2.072,439,2.072,440,3.927,441,3.209,442,2.072,443,3.209,444,2.072,445,2.072,446,3.209,447,2.072,448,3.209,449,2.072,450,2.072,451,2.072,452,2.072,453,2.072,454,2.072,455,2.072]],["title/coverage.html",[456,3.35]],["body/coverage.html",[0,0.264,1,1.737,5,0.173,6,2.767,12,0.657,14,0.942,16,1.04,18,0.346,19,0.027,43,0.942,49,1.351,50,1.681,55,0.015,56,0.015,58,2.144,60,1.681,61,2.767,62,2.767,65,1.391,66,2.235,67,1.681,69,2.144,91,1.391,123,2.062,125,2.144,138,1.013,188,1.278,189,2.938,194,1.391,208,1.278,212,1.391,213,2.144,214,2.767,230,1.879,231,1.681,233,2.144,257,5.614,260,1.879,270,2.767,279,1.681,281,2.767,290,1.681,293,2.767,299,1.681,301,1.681,302,2.144,315,1.391,318,1.879,340,2.144,373,1.681,374,2.144,380,2.767,386,1.681,391,1.681,392,2.144,401,1.391,418,2.144,456,1.879,457,2.546,458,2.546,459,2.546,460,5.234,461,5.475,462,5.661,463,4.91,464,2.546,465,4.451,466,2.546,467,2.144,468,2.546,469,2.144,470,2.144,471,2.546,472,2.546]],["title/dependencies.html",[109,2.012,473,2.349]],["body/dependencies.html",[0,0.212,19,0.028,44,1.732,45,1.34,55,0.021,56,0.021,90,1.34,109,1.956,119,1.805,164,3.281,171,3.281,200,2.572,204,2.33,246,2.33,247,3.281,376,3.281,377,3.281,429,3.281,474,6.104,475,3.897,476,3.897,477,3.897,478,3.897,479,3.897,480,3.897,481,3.897,482,3.897,483,3.897,484,3.897,485,3.897,486,3.897,487,3.897,488,3.897,489,3.897,490,3.897,491,3.897,492,3.897]],["title/miscellaneous/functions.html",[493,1.842,494,3.374]],["body/miscellaneous/functions.html",[9,0.56,19,0.024,55,0.024,56,0.024,467,4.232,469,5.26,493,3.318,494,4.232,495,5.026]],["title/index.html",[9,0.311,496,2.79,497,2.79]],["body/index.html",[4,0.23,19,0.027,45,1.163,55,0.019,56,0.019,456,2.494,498,3.38,499,3.38,500,4.582,501,3.38,502,3.38,503,3.38,504,3.38,505,3.38,506,3.38,507,2.846,508,5.198,509,3.38,510,3.38,511,3.38,512,6.142,513,3.38,514,3.38,515,3.38,516,6.006,517,3.38,518,3.38,519,4.582,520,3.38,521,3.38,522,3.38,523,3.38,524,4.582,525,4.582,526,3.38,527,3.38,528,3.38,529,4.582,530,4.582,531,3.38,532,3.38,533,3.38,534,3.38,535,3.38,536,2.846,537,3.38,538,3.38,539,3.38,540,3.38,541,3.38,542,3.38,543,3.38,544,3.38,545,3.38,546,3.38,547,2.846,548,3.38,549,3.38,550,3.38,551,3.38,552,3.38,553,3.38,554,2.846]],["title/modules.html",[108,2.279]],["body/modules.html",[19,0.023,55,0.023,56,0.023,107,2.795,108,2.346,154,3.085,157,2.795,158,2.795,536,5.296,555,6.291,556,6.291,557,6.291]],["title/overview.html",[558,3.822]],["body/overview.html",[2,1.126,19,0.026,55,0.02,56,0.02,57,2.787,59,2.064,68,1.75,91,3.002,107,3.615,108,1.897,109,2.477,110,3.181,111,3.181,112,2.951,113,2.259,114,2.259,124,2.494,154,4.228,155,3.181,156,3.181,157,3.615,158,3.615,230,2.787,315,3.002,332,3.181,333,3.181,401,3.002,408,3.181,409,3.181,558,3.181,559,3.778,560,4.934,561,3.778,562,3.778]],["title/properties.html",[10,0.892,473,2.349]],["body/properties.html",[10,1.1,19,0.027,55,0.024,56,0.024,507,4.159,547,4.159,554,4.159,563,4.94,564,4.94,565,4.94]],["title/miscellaneous/variables.html",[493,1.842,566,3.374]],["body/miscellaneous/variables.html",[9,0.505,16,1.535,19,0.027,55,0.023,56,0.023,99,2.098,135,2.988,239,3.812,250,2.988,318,3.341,470,4.658,493,2.988,566,3.812,567,4.527,568,4.527,569,4.527,570,4.527,571,4.527,572,4.527,573,4.527,574,4.527,575,4.527]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":257,"title":{},"body":{"guards/JwtUserGuard.html":{},"coverage.html":{}}}],["0.0.1",{"_index":564,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":57,"title":{"classes/Answer-1.html":{}},"body":{"guards/JwtUserGuard.html":{},"overview.html":{}}}],["100",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["13",{"_index":561,"title":{},"body":{"overview.html":{}}}],["16.0.3",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["2.1.5",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["24h",{"_index":416,"title":{},"body":{"modules/UsersModule.html":{}}}],["3",{"_index":560,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["3.3.1",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":559,"title":{},"body":{"overview.html":{}}}],["5",{"_index":562,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["6.25.3",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["address",{"_index":390,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["allownull",{"_index":274,"title":{},"body":{"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["already",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":537,"title":{},"body":{"index.html":{}}}],["answer",{"_index":1,"title":{"classes/Answer.html":{},"classes/Answer-1.html":{}},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"coverage.html":{}}}],["answer.dto",{"_index":94,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{}}}],["answer.dto.ts",{"_index":62,"title":{},"body":{"classes/AnswerType.html":{},"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["answer.dto.ts:11",{"_index":64,"title":{},"body":{"classes/AnswerType.html":{}}}],["answer.dto.ts:12",{"_index":63,"title":{},"body":{"classes/AnswerType.html":{}}}],["answer.dto.ts:4",{"_index":187,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:5",{"_index":186,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.dto.ts:6",{"_index":185,"title":{},"body":{"classes/CreateAnswerDto.html":{}}}],["answer.option_id",{"_index":146,"title":{},"body":{"injectables/AnswersService.html":{}}}],["answer.question_id",{"_index":147,"title":{},"body":{"injectables/AnswersService.html":{}}}],["answercreationattrs",{"_index":50,"title":{"interfaces/AnswerCreationAttrs.html":{}},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"coverage.html":{}}}],["answerrepository",{"_index":131,"title":{},"body":{"injectables/AnswersService.html":{}}}],["answers",{"_index":52,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"classes/CreateAnswerDto.html":{}}}],["answers.controller",{"_index":117,"title":{},"body":{"modules/AnswersModule.html":{}}}],["answers.service",{"_index":92,"title":{},"body":{"controllers/AnswersController.html":{},"modules/AnswersModule.html":{}}}],["answers/answers.module",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["answerscontroller",{"_index":67,"title":{"controllers/AnswersController.html":{}},"body":{"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"coverage.html":{}}}],["answersmodule",{"_index":107,"title":{"modules/AnswersModule.html":{}},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["answersservice",{"_index":91,"title":{"injectables/AnswersService.html":{}},"body":{"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"coverage.html":{},"overview.html":{}}}],["answertype",{"_index":60,"title":{"classes/AnswerType.html":{}},"body":{"classes/AnswerType.html":{},"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["app",{"_index":514,"title":{},"body":{"index.html":{}}}],["applications",{"_index":506,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":154,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arraymaxsize",{"_index":201,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["arraymaxsize(15",{"_index":207,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["arrayminsize",{"_index":202,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["arrayminsize(1",{"_index":206,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["async",{"_index":126,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{}}}],["attributes",{"_index":152,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{}}}],["auth.decorator",{"_index":319,"title":{},"body":{"controllers/SurveysController.html":{}}}],["auth.decorator.ts",{"_index":470,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authheader",{"_index":253,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["authheader.split",{"_index":256,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["author",{"_index":547,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorized",{"_index":261,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["autoincrement",{"_index":272,"title":{},"body":{"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["autoloadmodels",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":143,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":538,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.gensalt",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{}}}],["bearer",{"_index":255,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["belongsto",{"_index":39,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{}}}],["belongsto(undefined",{"_index":29,"title":{},"body":{"classes/Answer.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/Survey.html":{}}}],["body",{"_index":87,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":242,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["bootstrap",{"_index":469,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":557,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":555,"title":{},"body":{"modules.html":{}}}],["building",{"_index":501,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":234,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["canactivate(context",{"_index":238,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["cascade",{"_index":372,"title":{},"body":{"injectables/SurveysService.html":{}}}],["catch",{"_index":266,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["characters",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["class",{"_index":0,"title":{"classes/Answer.html":{},"classes/Answer-1.html":{},"classes/AnswerType.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"classes/AnswerType.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_answersmodule",{"_index":110,"title":{},"body":{"modules/AnswersModule.html":{},"overview.html":{}}}],["cluster_answersmodule_providers",{"_index":111,"title":{},"body":{"modules/AnswersModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_surveysmodule",{"_index":332,"title":{},"body":{"modules/SurveysModule.html":{},"overview.html":{}}}],["cluster_surveysmodule_providers",{"_index":333,"title":{},"body":{"modules/SurveysModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":408,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":409,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":40,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["column({type",{"_index":22,"title":{},"body":{"classes/Answer.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/Survey.html":{},"classes/User.html":{}}}],["console.log(e",{"_index":268,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["const",{"_index":250,"title":{},"body":{"guards/JwtUserGuard.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":128,"title":{},"body":{"injectables/AnswersService.html":{},"guards/JwtUserGuard.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(answer",{"_index":140,"title":{},"body":{"injectables/AnswersService.html":{}}}],["constructor(answerrepository",{"_index":129,"title":{},"body":{"injectables/AnswersService.html":{}}}],["constructor(jwtservice",{"_index":235,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["constructor(private",{"_index":96,"title":{},"body":{"controllers/AnswersController.html":{},"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["constructor(surveyrepository",{"_index":341,"title":{},"body":{"injectables/SurveysService.html":{}}}],["constructor(userrepository",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["context",{"_index":241,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":252,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["controller",{"_index":66,"title":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('answers",{"_index":95,"title":{},"body":{"controllers/AnswersController.html":{}}}],["controller('surveys",{"_index":321,"title":{},"body":{"controllers/SurveysController.html":{}}}],["controller('users",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":68,"title":{},"body":{"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"modules/AppModule.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":456,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":72,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":98,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["create(createanswerdto",{"_index":75,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{}}}],["create(createsurveydto",{"_index":304,"title":{},"body":{"controllers/SurveysController.html":{},"injectables/SurveysService.html":{}}}],["create(createuserdto",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createanswerdto",{"_index":65,"title":{"classes/CreateAnswerDto.html":{}},"body":{"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["createanswerdto.answers.foreach(async",{"_index":144,"title":{},"body":{"injectables/AnswersService.html":{}}}],["createanswerdto.survey_id",{"_index":148,"title":{},"body":{"injectables/AnswersService.html":{}}}],["createanswerdto.user_id",{"_index":149,"title":{},"body":{"injectables/AnswersService.html":{}}}],["createparamdecorator",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createsurveydto",{"_index":188,"title":{"classes/CreateSurveyDto.html":{}},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"coverage.html":{}}}],["createsurveydto.questions.foreach(async",{"_index":356,"title":{},"body":{"injectables/SurveysService.html":{}}}],["createsurveydto.user_id",{"_index":323,"title":{},"body":{"controllers/SurveysController.html":{}}}],["createuserdto",{"_index":212,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.name",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["ctx",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["datatype",{"_index":41,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["datatype.integer",{"_index":54,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["datatype.string",{"_index":280,"title":{},"body":{"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["decorators",{"_index":21,"title":{},"body":{"classes/Answer.html":{},"controllers/AnswersController.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/Survey.html":{},"controllers/SurveysController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":27,"title":{},"body":{"classes/Answer.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":89,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":85,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{}}}],["dependencies",{"_index":109,"title":{"dependencies.html":{}},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":507,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":515,"title":{},"body":{"index.html":{}}}],["dialect",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["doesuserexist",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["dotenv",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":93,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/surveydto",{"_index":317,"title":{},"body":{"controllers/SurveysController.html":{},"injectables/SurveysService.html":{}}}],["dto/update",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":267,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["e2e",{"_index":526,"title":{},"body":{"index.html":{}}}],["each",{"_index":205,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["efficient",{"_index":502,"title":{},"body":{"index.html":{}}}],["email",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"injectables/UsersService.html":{}}}],["entities/option.entity",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/question.entity",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/survey.entity",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/user.entity",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":269,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["executioncontext",{"_index":239,"title":{},"body":{"guards/JwtUserGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["expiresin",{"_index":415,"title":{},"body":{"modules/UsersModule.html":{}}}],["export",{"_index":53,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":417,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":7,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["false",{"_index":275,"title":{},"body":{"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":73,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{}}}],["findall(@body",{"_index":326,"title":{},"body":{"controllers/SurveysController.html":{}}}],["findall(@param('survey_id",{"_index":101,"title":{},"body":{"controllers/AnswersController.html":{}}}],["findall(findallsurveydto",{"_index":307,"title":{},"body":{"controllers/SurveysController.html":{}}}],["findall(options",{"_index":347,"title":{},"body":{"injectables/SurveysService.html":{}}}],["findall(survey_id",{"_index":82,"title":{},"body":{"controllers/AnswersController.html":{}}}],["findallbysurvey",{"_index":127,"title":{},"body":{"injectables/AnswersService.html":{}}}],["findallbysurvey(survey_id",{"_index":133,"title":{},"body":{"injectables/AnswersService.html":{}}}],["findallsurveydto",{"_index":208,"title":{"classes/FindAllSurveyDto.html":{}},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"coverage.html":{}}}],["findone",{"_index":303,"title":{},"body":{"controllers/SurveysController.html":{},"injectables/SurveysService.html":{}}}],["findone(@param('id",{"_index":328,"title":{},"body":{"controllers/SurveysController.html":{}}}],["findone(id",{"_index":309,"title":{},"body":{"controllers/SurveysController.html":{},"injectables/SurveysService.html":{}}}],["foreignkey",{"_index":42,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{}}}],["foreignkey(undefined",{"_index":31,"title":{},"body":{"classes/Answer.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/Survey.html":{}}}],["framework",{"_index":500,"title":{},"body":{"index.html":{}}}],["function",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":494,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatejwt",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["generatejwt(user",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["get(':id",{"_index":310,"title":{},"body":{"controllers/SurveysController.html":{}}}],["getting",{"_index":496,"title":{"index.html":{}},"body":{}}],["grow",{"_index":533,"title":{},"body":{"index.html":{}}}],["guard",{"_index":230,"title":{"guards/JwtUserGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":232,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["hasmany",{"_index":288,"title":{},"body":{"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{}}}],["hasmany(undefined",{"_index":283,"title":{},"body":{"classes/Question.html":{},"classes/Survey.html":{}}}],["here",{"_index":544,"title":{},"body":{"index.html":{}}}],["host",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception('incorrect",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception('user",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://nestjs.com",{"_index":551,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":271,"title":{},"body":{"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":248,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["import",{"_index":38,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":121,"title":{},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":151,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":123,"title":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnswersService.html":{},"guards/JwtUserGuard.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":124,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":137,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(option",{"_index":354,"title":{},"body":{"injectables/SurveysService.html":{}}}],["injectmodel(question",{"_index":353,"title":{},"body":{"injectables/SurveysService.html":{}}}],["injectmodel(survey",{"_index":352,"title":{},"body":{"injectables/SurveysService.html":{}}}],["injectmodel(user",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":511,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":513,"title":{},"body":{"index.html":{}}}],["interface",{"_index":49,"title":{"interfaces/AnswerCreationAttrs.html":{},"interfaces/OptionCreationAttrs.html":{},"interfaces/QuestionCreationAttrs.html":{},"interfaces/SurveyCreationAttrs.html":{},"interfaces/UserCreatingAttrs.html":{}},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"coverage.html":{}}}],["interfaces",{"_index":59,"title":{},"body":{"interfaces/AnswerCreationAttrs.html":{},"interfaces/OptionCreationAttrs.html":{},"interfaces/QuestionCreationAttrs.html":{},"interfaces/SurveyCreationAttrs.html":{},"interfaces/UserCreatingAttrs.html":{},"overview.html":{}}}],["isemail",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["isnotempty",{"_index":192,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["isnotempty()@maxlength(100",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":198,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["isvalidpassword",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":540,"title":{},"body":{"index.html":{}}}],["jwtmodule",{"_index":338,"title":{},"body":{"modules/SurveysModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.register",{"_index":413,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtservice",{"_index":236,"title":{},"body":{"guards/JwtUserGuard.html":{},"injectables/UsersService.html":{}}}],["jwtuserguard",{"_index":231,"title":{"guards/JwtUserGuard.html":{}},"body":{"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"coverage.html":{}}}],["kamil",{"_index":548,"title":{},"body":{"index.html":{}}}],["length",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":554,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":530,"title":{},"body":{"index.html":{}}}],["login",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(createuserdto",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["matching",{"_index":56,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(100",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"guards/JwtUserGuard.html":{}}}],["metadata",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":71,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":493,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":529,"title":{},"body":{"index.html":{}}}],["mode",{"_index":519,"title":{},"body":{"index.html":{}}}],["model",{"_index":8,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"injectables/AnswersService.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["models",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["module",{"_index":106,"title":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":108,"title":{"modules.html":{}},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":543,"title":{},"body":{"index.html":{}}}],["msg",{"_index":388,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["myśliwiec",{"_index":549,"title":{},"body":{"index.html":{}}}],["name",{"_index":79,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":508,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":553,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":90,"title":{},"body":{"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":246,"title":{},"body":{"guards/JwtUserGuard.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":376,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["nestjs/sequelize",{"_index":119,"title":{},"body":{"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"guards/JwtUserGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":499,"title":{},"body":{"index.html":{}}}],["npm",{"_index":512,"title":{},"body":{"index.html":{}}}],["number",{"_index":20,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["number(process.env.db_port",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["observable",{"_index":244,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["op",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["op.or",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["open",{"_index":531,"title":{},"body":{"index.html":{}}}],["option",{"_index":138,"title":{"classes/Option.html":{}},"body":{"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"coverage.html":{}}}],["option.entity",{"_index":289,"title":{},"body":{"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{}}}],["option_id",{"_index":11,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{}}}],["optional",{"_index":80,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optioncreationattrs",{"_index":279,"title":{"interfaces/OptionCreationAttrs.html":{}},"body":{"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"coverage.html":{}}}],["optionrepository",{"_index":343,"title":{},"body":{"injectables/SurveysService.html":{}}}],["options",{"_index":211,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"injectables/SurveysService.html":{}}}],["options.survey_name",{"_index":364,"title":{},"body":{"injectables/SurveysService.html":{}}}],["options.user_name",{"_index":365,"title":{},"body":{"injectables/SurveysService.html":{}}}],["out",{"_index":114,"title":{},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":558,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":473,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":88,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["param('survey_id",{"_index":104,"title":{},"body":{"controllers/AnswersController.html":{}}}],["param('user_id",{"_index":103,"title":{},"body":{"controllers/AnswersController.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["partialtype",{"_index":375,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":379,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["pg",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":541,"title":{},"body":{"index.html":{}}}],["port",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":76,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["post('/create",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/login",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["prefix",{"_index":70,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["primarykey",{"_index":26,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["private",{"_index":141,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{}}}],["process.env.db_host",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_name",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.secret",{"_index":264,"title":{},"body":{"guards/JwtUserGuard.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":521,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":498,"title":{},"body":{"index.html":{}}}],["project",{"_index":532,"title":{},"body":{"index.html":{}}}],["promise",{"_index":243,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"properties.html":{}}}],["providers",{"_index":116,"title":{},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{}}}],["q",{"_index":357,"title":{},"body":{"injectables/SurveysService.html":{}}}],["q.options.foreach(async",{"_index":361,"title":{},"body":{"injectables/SurveysService.html":{}}}],["q.question",{"_index":359,"title":{},"body":{"injectables/SurveysService.html":{}}}],["question",{"_index":12,"title":{"classes/Question.html":{}},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"modules/AppModule.html":{},"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"coverage.html":{}}}],["question.entity",{"_index":46,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{}}}],["question.id",{"_index":363,"title":{},"body":{"injectables/SurveysService.html":{}}}],["question_id",{"_index":13,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"injectables/SurveysService.html":{}}}],["questioncreationattrs",{"_index":290,"title":{"interfaces/QuestionCreationAttrs.html":{}},"body":{"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"coverage.html":{}}}],["questionrepository",{"_index":342,"title":{},"body":{"injectables/SurveysService.html":{}}}],["questions",{"_index":190,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"injectables/SurveysService.html":{}}}],["questiontype",{"_index":194,"title":{"classes/QuestionType.html":{}},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"injectables/SurveysService.html":{},"coverage.html":{}}}],["read",{"_index":542,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":97,"title":{},"body":{"controllers/AnswersController.html":{},"controllers/SurveysController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":74,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{}}}],["remove(@param('id",{"_index":330,"title":{},"body":{"controllers/SurveysController.html":{}}}],["remove(id",{"_index":312,"title":{},"body":{"controllers/SurveysController.html":{},"injectables/SurveysService.html":{}}}],["remove(user_id",{"_index":84,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{}}}],["repository",{"_index":510,"title":{},"body":{"index.html":{}}}],["req",{"_index":251,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["req.headers.authorization",{"_index":254,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["req.user",{"_index":265,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["request",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":367,"title":{},"body":{"injectables/SurveysService.html":{}}}],["reset",{"_index":113,"title":{},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":55,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":99,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":81,"title":{},"body":{"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"guards/JwtUserGuard.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":516,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":247,"title":{},"body":{"guards/JwtUserGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":503,"title":{},"body":{"index.html":{}}}],["secret",{"_index":263,"title":{},"body":{"guards/JwtUserGuard.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["sequelize",{"_index":44,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["sequelizemodule",{"_index":118,"title":{},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{}}}],["sequelizemodule.forfeature([answer",{"_index":122,"title":{},"body":{"modules/AnswersModule.html":{}}}],["sequelizemodule.forfeature([survey",{"_index":339,"title":{},"body":{"modules/SurveysModule.html":{}}}],["sequelizemodule.forfeature([user",{"_index":412,"title":{},"body":{"modules/UsersModule.html":{}}}],["sequelizemodule.forroot",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":504,"title":{},"body":{"index.html":{}}}],["side",{"_index":505,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":414,"title":{},"body":{"modules/UsersModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Answer.html":{},"classes/Answer-1.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"modules/AnswersModule.html":{},"injectables/AnswersService.html":{},"modules/AppModule.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":535,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/answers/answers.controller.ts",{"_index":69,"title":{},"body":{"controllers/AnswersController.html":{},"coverage.html":{}}}],["src/answers/answers.controller.ts:10",{"_index":77,"title":{},"body":{"controllers/AnswersController.html":{}}}],["src/answers/answers.controller.ts:15",{"_index":83,"title":{},"body":{"controllers/AnswersController.html":{}}}],["src/answers/answers.controller.ts:20",{"_index":86,"title":{},"body":{"controllers/AnswersController.html":{}}}],["src/answers/answers.module.ts",{"_index":115,"title":{},"body":{"modules/AnswersModule.html":{}}}],["src/answers/answers.service.ts",{"_index":125,"title":{},"body":{"injectables/AnswersService.html":{},"coverage.html":{}}}],["src/answers/answers.service.ts:11",{"_index":132,"title":{},"body":{"injectables/AnswersService.html":{}}}],["src/answers/answers.service.ts:22",{"_index":134,"title":{},"body":{"injectables/AnswersService.html":{}}}],["src/answers/answers.service.ts:29",{"_index":136,"title":{},"body":{"injectables/AnswersService.html":{}}}],["src/answers/answers.service.ts:8",{"_index":130,"title":{},"body":{"injectables/AnswersService.html":{}}}],["src/answers/dto/create",{"_index":61,"title":{},"body":{"classes/AnswerType.html":{},"classes/CreateAnswerDto.html":{},"coverage.html":{}}}],["src/answers/entities/answer.entity.ts",{"_index":58,"title":{},"body":{"classes/Answer-1.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["src/entities/answer.entity",{"_index":120,"title":{},"body":{"modules/AnswersModule.html":{},"injectables/AnswersService.html":{}}}],["src/entities/answer.entity.ts",{"_index":6,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"coverage.html":{}}}],["src/entities/answer.entity.ts:28",{"_index":28,"title":{},"body":{"classes/Answer.html":{}}}],["src/entities/answer.entity.ts:35",{"_index":37,"title":{},"body":{"classes/Answer.html":{}}}],["src/entities/answer.entity.ts:38",{"_index":35,"title":{},"body":{"classes/Answer.html":{}}}],["src/entities/answer.entity.ts:41",{"_index":30,"title":{},"body":{"classes/Answer.html":{}}}],["src/entities/answer.entity.ts:44",{"_index":32,"title":{},"body":{"classes/Answer.html":{}}}],["src/entities/answer.entity.ts:47",{"_index":33,"title":{},"body":{"classes/Answer.html":{}}}],["src/entities/answer.entity.ts:50",{"_index":34,"title":{},"body":{"classes/Answer.html":{}}}],["src/entities/option.entity",{"_index":139,"title":{},"body":{"injectables/AnswersService.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{}}}],["src/entities/option.entity.ts",{"_index":270,"title":{},"body":{"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"coverage.html":{}}}],["src/entities/option.entity.ts:24",{"_index":273,"title":{},"body":{"classes/Option.html":{}}}],["src/entities/option.entity.ts:27",{"_index":276,"title":{},"body":{"classes/Option.html":{}}}],["src/entities/option.entity.ts:30",{"_index":277,"title":{},"body":{"classes/Option.html":{}}}],["src/entities/option.entity.ts:33",{"_index":278,"title":{},"body":{"classes/Option.html":{}}}],["src/entities/question.entity",{"_index":336,"title":{},"body":{"modules/SurveysModule.html":{},"injectables/SurveysService.html":{}}}],["src/entities/question.entity.ts",{"_index":281,"title":{},"body":{"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"coverage.html":{}}}],["src/entities/question.entity.ts:26",{"_index":282,"title":{},"body":{"classes/Question.html":{}}}],["src/entities/question.entity.ts:29",{"_index":285,"title":{},"body":{"classes/Question.html":{}}}],["src/entities/question.entity.ts:32",{"_index":286,"title":{},"body":{"classes/Question.html":{}}}],["src/entities/question.entity.ts:35",{"_index":287,"title":{},"body":{"classes/Question.html":{}}}],["src/entities/question.entity.ts:38",{"_index":284,"title":{},"body":{"classes/Question.html":{}}}],["src/entities/survey.entity",{"_index":337,"title":{},"body":{"modules/SurveysModule.html":{},"injectables/SurveysService.html":{}}}],["src/entities/survey.entity.ts",{"_index":293,"title":{},"body":{"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"coverage.html":{}}}],["src/entities/survey.entity.ts:25",{"_index":294,"title":{},"body":{"classes/Survey.html":{}}}],["src/entities/survey.entity.ts:28",{"_index":295,"title":{},"body":{"classes/Survey.html":{}}}],["src/entities/survey.entity.ts:31",{"_index":297,"title":{},"body":{"classes/Survey.html":{}}}],["src/entities/survey.entity.ts:34",{"_index":298,"title":{},"body":{"classes/Survey.html":{}}}],["src/entities/survey.entity.ts:37",{"_index":296,"title":{},"body":{"classes/Survey.html":{}}}],["src/entities/user.entity",{"_index":351,"title":{},"body":{"injectables/SurveysService.html":{}}}],["src/entities/user.entity.ts",{"_index":380,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:17",{"_index":383,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:20",{"_index":384,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:30",{"_index":382,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:36",{"_index":385,"title":{},"body":{"classes/User.html":{}}}],["src/main.ts",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/user",{"_index":318,"title":{},"body":{"controllers/SurveysController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/surveys/dto/surveydto.ts",{"_index":189,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"coverage.html":{}}}],["src/surveys/dto/surveydto.ts:12",{"_index":193,"title":{},"body":{"classes/CreateSurveyDto.html":{}}}],["src/surveys/dto/surveydto.ts:18",{"_index":197,"title":{},"body":{"classes/CreateSurveyDto.html":{}}}],["src/surveys/dto/surveydto.ts:21",{"_index":199,"title":{},"body":{"classes/CreateSurveyDto.html":{}}}],["src/surveys/dto/surveydto.ts:25",{"_index":228,"title":{},"body":{"classes/FindAllSurveyDto.html":{}}}],["src/surveys/dto/surveydto.ts:26",{"_index":229,"title":{},"body":{"classes/FindAllSurveyDto.html":{}}}],["src/surveys/dto/surveydto.ts:30",{"_index":292,"title":{},"body":{"classes/QuestionType.html":{}}}],["src/surveys/dto/surveydto.ts:31",{"_index":291,"title":{},"body":{"classes/QuestionType.html":{}}}],["src/surveys/surveys.controller.ts",{"_index":302,"title":{},"body":{"controllers/SurveysController.html":{},"coverage.html":{}}}],["src/surveys/surveys.controller.ts:21",{"_index":306,"title":{},"body":{"controllers/SurveysController.html":{}}}],["src/surveys/surveys.controller.ts:27",{"_index":308,"title":{},"body":{"controllers/SurveysController.html":{}}}],["src/surveys/surveys.controller.ts:32",{"_index":311,"title":{},"body":{"controllers/SurveysController.html":{}}}],["src/surveys/surveys.controller.ts:37",{"_index":313,"title":{},"body":{"controllers/SurveysController.html":{}}}],["src/surveys/surveys.module.ts",{"_index":334,"title":{},"body":{"modules/SurveysModule.html":{}}}],["src/surveys/surveys.service.ts",{"_index":340,"title":{},"body":{"injectables/SurveysService.html":{},"coverage.html":{}}}],["src/surveys/surveys.service.ts:109",{"_index":350,"title":{},"body":{"injectables/SurveysService.html":{}}}],["src/surveys/surveys.service.ts:14",{"_index":344,"title":{},"body":{"injectables/SurveysService.html":{}}}],["src/surveys/surveys.service.ts:21",{"_index":346,"title":{},"body":{"injectables/SurveysService.html":{}}}],["src/surveys/surveys.service.ts:41",{"_index":348,"title":{},"body":{"injectables/SurveysService.html":{}}}],["src/surveys/surveys.service.ts:90",{"_index":349,"title":{},"body":{"injectables/SurveysService.html":{}}}],["src/users/auth.guard",{"_index":320,"title":{},"body":{"controllers/SurveysController.html":{}}}],["src/users/auth.guard.ts",{"_index":233,"title":{},"body":{"guards/JwtUserGuard.html":{},"coverage.html":{}}}],["src/users/auth.guard.ts:11",{"_index":237,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["src/users/auth.guard.ts:13",{"_index":240,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["src/users/dto/create",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":374,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:19",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:24",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":410,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":517,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":520,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":522,"title":{},"body":{"index.html":{}}}],["started",{"_index":497,"title":{"index.html":{}},"body":{}}],["starter",{"_index":509,"title":{},"body":{"index.html":{}}}],["statements",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":545,"title":{},"body":{"index.html":{}}}],["string",{"_index":191,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["support",{"_index":536,"title":{},"body":{"index.html":{},"modules.html":{}}}],["survey",{"_index":14,"title":{"classes/Survey.html":{}},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"modules/AppModule.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"coverage.html":{}}}],["survey.entity",{"_index":47,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{}}}],["survey.id",{"_index":360,"title":{},"body":{"injectables/SurveysService.html":{}}}],["survey.name",{"_index":370,"title":{},"body":{"injectables/SurveysService.html":{}}}],["survey_id",{"_index":15,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"injectables/SurveysService.html":{}}}],["survey_name",{"_index":209,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"injectables/SurveysService.html":{}}}],["surveycreationattrs",{"_index":299,"title":{"interfaces/SurveyCreationAttrs.html":{}},"body":{"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"coverage.html":{}}}],["surveyrepository",{"_index":345,"title":{},"body":{"injectables/SurveysService.html":{}}}],["surveys",{"_index":300,"title":{},"body":{"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{}}}],["surveys.controller",{"_index":335,"title":{},"body":{"modules/SurveysModule.html":{}}}],["surveys.service",{"_index":316,"title":{},"body":{"controllers/SurveysController.html":{},"modules/SurveysModule.html":{}}}],["surveys/surveys.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["surveyscontroller",{"_index":301,"title":{"controllers/SurveysController.html":{}},"body":{"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"coverage.html":{}}}],["surveysmodule",{"_index":157,"title":{"modules/SurveysModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules.html":{},"overview.html":{}}}],["surveysservice",{"_index":315,"title":{"injectables/SurveysService.html":{}},"body":{"controllers/SurveysController.html":{},"modules/SurveysModule.html":{},"injectables/SurveysService.html":{},"coverage.html":{},"overview.html":{}}}],["svg",{"_index":556,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":43,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"coverage.html":{}}}],["tablename",{"_index":51,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":525,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":528,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":527,"title":{},"body":{"index.html":{}}}],["tests",{"_index":524,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":534,"title":{},"body":{"index.html":{}}}],["this.answerrepository.create",{"_index":145,"title":{},"body":{"injectables/AnswersService.html":{}}}],["this.answerrepository.destroy",{"_index":153,"title":{},"body":{"injectables/AnswersService.html":{}}}],["this.answerrepository.findandcountall",{"_index":150,"title":{},"body":{"injectables/AnswersService.html":{}}}],["this.answersservice.create(createanswerdto",{"_index":100,"title":{},"body":{"controllers/AnswersController.html":{}}}],["this.answersservice.findallbysurvey(survey_id",{"_index":102,"title":{},"body":{"controllers/AnswersController.html":{}}}],["this.answersservice.remove(user_id",{"_index":105,"title":{},"body":{"controllers/AnswersController.html":{}}}],["this.generatejwt(user",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.verify(token",{"_index":262,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["this.optionrepository.create",{"_index":362,"title":{},"body":{"injectables/SurveysService.html":{}}}],["this.questionrepository.create",{"_index":358,"title":{},"body":{"injectables/SurveysService.html":{}}}],["this.questionrepository.findall",{"_index":369,"title":{},"body":{"injectables/SurveysService.html":{}}}],["this.surveyrepository.create(createsurveydto",{"_index":355,"title":{},"body":{"injectables/SurveysService.html":{}}}],["this.surveyrepository.destroy",{"_index":371,"title":{},"body":{"injectables/SurveysService.html":{}}}],["this.surveyrepository.findall",{"_index":366,"title":{},"body":{"injectables/SurveysService.html":{}}}],["this.surveyrepository.findone",{"_index":368,"title":{},"body":{"injectables/SurveysService.html":{}}}],["this.surveysservice.create(createsurveydto",{"_index":325,"title":{},"body":{"controllers/SurveysController.html":{}}}],["this.surveysservice.findall(findallsurveydto",{"_index":327,"title":{},"body":{"controllers/SurveysController.html":{}}}],["this.surveysservice.findone(+id",{"_index":329,"title":{},"body":{"controllers/SurveysController.html":{}}}],["this.surveysservice.remove(+id",{"_index":331,"title":{},"body":{"controllers/SurveysController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.login(createuserdto",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":259,"title":{},"body":{"guards/JwtUserGuard.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":258,"title":{},"body":{"guards/JwtUserGuard.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":546,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":200,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"dependencies.html":{}}}],["true",{"_index":25,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"modules/AppModule.html":{},"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["true})@arrayminsize(1)@arraymaxsize(15)@type(undefined",{"_index":196,"title":{},"body":{"classes/CreateSurveyDto.html":{}}}],["true})@foreignkey(undefined",{"_index":36,"title":{},"body":{"classes/Answer.html":{}}}],["try",{"_index":249,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["twitter",{"_index":552,"title":{},"body":{"index.html":{}}}],["type",{"_index":18,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"guards/JwtUserGuard.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeof",{"_index":142,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{}}}],["types",{"_index":377,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":45,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"dependencies.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":245,"title":{},"body":{"guards/JwtUserGuard.html":{}}}],["undefined",{"_index":23,"title":{},"body":{"classes/Answer.html":{},"classes/Option.html":{},"classes/Question.html":{},"classes/Survey.html":{},"classes/User.html":{}}}],["unique",{"_index":24,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Option.html":{},"interfaces/OptionCreationAttrs.html":{},"classes/Question.html":{},"interfaces/QuestionCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["unit",{"_index":523,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":135,"title":{},"body":{"injectables/AnswersService.html":{},"injectables/SurveysService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":565,"title":{},"body":{"properties.html":{}}}],["updateuserdto",{"_index":373,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["useguards",{"_index":314,"title":{},"body":{"controllers/SurveysController.html":{}}}],["useguards(jwtuserguard",{"_index":322,"title":{},"body":{"controllers/SurveysController.html":{}}}],["useguards(jwtuserguard)@post",{"_index":305,"title":{},"body":{"controllers/SurveysController.html":{}}}],["user",{"_index":16,"title":{"classes/User.html":{}},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"modules/AppModule.html":{},"guards/JwtUserGuard.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{},"controllers/SurveysController.html":{},"injectables/SurveysService.html":{},"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":378,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.entity",{"_index":48,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{}}}],["user.id",{"_index":324,"title":{},"body":{"controllers/SurveysController.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_id",{"_index":17,"title":{},"body":{"classes/Answer.html":{},"interfaces/AnswerCreationAttrs.html":{},"classes/AnswerType.html":{},"controllers/AnswersController.html":{},"injectables/AnswersService.html":{},"classes/CreateAnswerDto.html":{},"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"classes/Survey.html":{},"interfaces/SurveyCreationAttrs.html":{}}}],["user_name",{"_index":210,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["usercreatingattrs",{"_index":386,"title":{"interfaces/UserCreatingAttrs.html":{}},"body":{"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"coverage.html":{}}}],["username",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":387,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":411,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":391,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":158,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":401,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["valid",{"_index":389,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["validate",{"_index":381,"title":{},"body":{"classes/User.html":{},"interfaces/UserCreatingAttrs.html":{}}}],["validatenested",{"_index":203,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{}}}],["validatenested({each",{"_index":195,"title":{},"body":{"classes/CreateSurveyDto.html":{}}}],["validator",{"_index":204,"title":{},"body":{"classes/CreateSurveyDto.html":{},"classes/CreateUserDto.html":{},"classes/FindAllSurveyDto.html":{},"classes/QuestionType.html":{},"dependencies.html":{}}}],["value",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":566,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":563,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":518,"title":{},"body":{"index.html":{}}}],["website",{"_index":550,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":539,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":112,"title":{},"body":{"modules/AnswersModule.html":{},"modules/AppModule.html":{},"modules/SurveysModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Answer.html":{"url":"classes/Answer.html","title":"class - Answer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/answer.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                option_id\n                            \n                            \n                                question\n                            \n                            \n                                question_id\n                            \n                            \n                                survey\n                            \n                            \n                                survey_id\n                            \n                            \n                                user\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        option_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/answer.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/answer.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/answer.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        survey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Survey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/answer.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        survey_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/answer.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/answer.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, primaryKey: true})@ForeignKey(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/answer.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  PrimaryKey,\n  Table,\n} from 'sequelize-typescript';\nimport { Question } from './question.entity';\nimport { Survey } from './survey.entity';\nimport { User } from './user.entity';\n\ninterface AnswerCreationAttrs {\n  option_id: number;\n  question_id: number;\n  user_id: number;\n  survey_id: number;\n}\n\n@Table({ tableName: 'answers' })\nexport class Answer extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    primaryKey: true,\n  })\n  option_id: number;\n\n  @Column({\n    type: DataType.INTEGER,\n    primaryKey: true,\n  })\n  @ForeignKey(() => User)\n  user_id: number;\n\n  @BelongsTo(() => User)\n  user: User;\n\n  @BelongsTo(() => Question)\n  question: Question;\n\n  @ForeignKey(() => Question)\n  question_id: number;\n\n  @BelongsTo(() => Survey)\n  survey: Survey;\n\n  @ForeignKey(() => Survey)\n  survey_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Answer-1.html":{"url":"classes/Answer-1.html","title":"class - Answer-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Answer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answers/entities/answer.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Answer {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AnswerCreationAttrs.html":{"url":"interfaces/AnswerCreationAttrs.html","title":"interface - AnswerCreationAttrs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AnswerCreationAttrs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/answer.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            option_id\n                                        \n                                \n                                \n                                        \n                                            question_id\n                                        \n                                \n                                \n                                        \n                                            survey_id\n                                        \n                                \n                                \n                                        \n                                            user_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        option_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        option_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        question_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        survey_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        survey_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  PrimaryKey,\n  Table,\n} from 'sequelize-typescript';\nimport { Question } from './question.entity';\nimport { Survey } from './survey.entity';\nimport { User } from './user.entity';\n\ninterface AnswerCreationAttrs {\n  option_id: number;\n  question_id: number;\n  user_id: number;\n  survey_id: number;\n}\n\n@Table({ tableName: 'answers' })\nexport class Answer extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    primaryKey: true,\n  })\n  option_id: number;\n\n  @Column({\n    type: DataType.INTEGER,\n    primaryKey: true,\n  })\n  @ForeignKey(() => User)\n  user_id: number;\n\n  @BelongsTo(() => User)\n  user: User;\n\n  @BelongsTo(() => Question)\n  question: Question;\n\n  @ForeignKey(() => Question)\n  question_id: number;\n\n  @BelongsTo(() => Survey)\n  survey: Survey;\n\n  @ForeignKey(() => Survey)\n  survey_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AnswerType.html":{"url":"classes/AnswerType.html","title":"class - AnswerType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AnswerType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answers/dto/create-answer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                option_id\n                            \n                            \n                                question_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        option_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/answers/dto/create-answer.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/answers/dto/create-answer.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAnswerDto\n{\n  \n  user_id: number\n  survey_id: number\n  answers: AnswerType[]\n}\n\nclass AnswerType\n{\n  question_id: number\n  option_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnswersController.html":{"url":"controllers/AnswersController.html","title":"controller - AnswersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnswersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answers/answers.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                answers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createAnswerDto: CreateAnswerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/answers/answers.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDto\n                                    \n                                                CreateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(survey_id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/answers/answers.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    survey_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(user_id: number, survey_id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/answers/answers.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    survey_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, Delete } from '@nestjs/common';\nimport { AnswersService } from './answers.service';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\n\n@Controller('answers')\nexport class AnswersController {\n  constructor(private readonly answersService: AnswersService) {}\n\n  @Post()\n  create(@Body() createAnswerDto: CreateAnswerDto) {\n    return this.answersService.create(createAnswerDto);\n  }\n\n  @Get()\n  findAll(@Param('survey_id') survey_id: number) {\n    return this.answersService.findAllBySurvey(survey_id);\n  }\n\n  @Delete(':id')\n  remove(\n    @Param('user_id') user_id: number,\n    @Param('survey_id') survey_id: number,\n  ) {\n    return this.answersService.remove(user_id, survey_id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnswersModule.html":{"url":"modules/AnswersModule.html","title":"module - AnswersModule","body":"\n                   \n\n\n\n\n    Modules\n    AnswersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnswersModule\n\n\n\ncluster_AnswersModule_providers\n\n\n\n\nAnswersService\n\nAnswersService\n\n\n\nAnswersModule\n\nAnswersModule\n\nAnswersModule -->\n\nAnswersService->AnswersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/answers/answers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnswersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnswersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AnswersService } from './answers.service';\nimport { AnswersController } from './answers.controller';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Answer } from 'src/entities/answer.entity';\n\n@Module({\n  controllers: [AnswersController],\n  providers: [AnswersService],\n  imports: [SequelizeModule.forFeature([Answer])],\n})\nexport class AnswersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnswersService.html":{"url":"injectables/AnswersService.html","title":"injectable - AnswersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnswersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answers/answers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllBySurvey\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(answerRepository)\n                    \n                \n                        \n                            \n                                Defined in src/answers/answers.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        answerRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createAnswerDto: CreateAnswerDto)\n                \n            \n\n\n            \n                \n                    Defined in src/answers/answers.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAnswerDto\n                                    \n                                                CreateAnswerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllBySurvey\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllBySurvey(survey_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answers/answers.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    survey_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(user_id: number, survey_id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/answers/answers.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    survey_id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Answer } from 'src/entities/answer.entity';\nimport { Option } from 'src/entities/option.entity';\nimport { CreateAnswerDto } from './dto/create-answer.dto';\n\n@Injectable()\nexport class AnswersService {\n  constructor(@InjectModel(Answer) private answerRepository: typeof Answer) {}\n\n  async create(createAnswerDto: CreateAnswerDto) {\n    await createAnswerDto.answers.forEach(async (answer) => {\n      await this.answerRepository.create({\n        option_id: answer.option_id,\n        question_id: answer.question_id,\n        survey_id: createAnswerDto.survey_id,\n        user_id: createAnswerDto.user_id,\n      });\n    });\n  }\n\n  async findAllBySurvey(survey_id: number) {\n    return await this.answerRepository.findAndCountAll({\n      where: { survey_id },\n      include: [{ model: Option, attributes: ['option'] }],\n    });\n  }\n\n  remove(user_id: number, survey_id: number) {\n    return this.answerRepository.destroy({\n      where: {\n        user_id,\n        survey_id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnswersModule\n\nAnswersModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswersModule->AppModule\n\n\n\n\n\nSurveysModule\n\nSurveysModule\n\nAppModule -->\n\nSurveysModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AnswersModule\n                        \n                        \n                            SurveysModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { UsersModule } from './users/users.module';\nimport { SurveysModule } from './surveys/surveys.module';\nimport { Survey } from './entities/survey.entity';\nimport { User } from './entities/user.entity';\nimport * as dotenv from 'dotenv';\nimport { Question } from './entities/question.entity';\nimport { Option } from './entities/option.entity';\nimport { AnswersModule } from './answers/answers.module';\n\ndotenv.config();\n\n@Module({\n  imports: [\n    SequelizeModule.forRoot({\n      dialect: 'postgres',\n      host: process.env.DB_HOST,\n      port: Number(process.env.DB_PORT),\n      username: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      autoLoadModels: true,\n      synchronize: true,\n      models: [User, Survey, Question, Option],\n    }),\n    UsersModule,\n    SurveysModule,\n    AnswersModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnswerDto.html":{"url":"classes/CreateAnswerDto.html","title":"class - CreateAnswerDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnswerDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/answers/dto/create-answer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                answers\n                            \n                            \n                                survey_id\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        answers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AnswerType[]\n\n                    \n                \n                    \n                        \n                                Defined in src/answers/dto/create-answer.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        survey_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/answers/dto/create-answer.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/answers/dto/create-answer.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAnswerDto\n{\n  \n  user_id: number\n  survey_id: number\n  answers: AnswerType[]\n}\n\nclass AnswerType\n{\n  question_id: number\n  option_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSurveyDto.html":{"url":"classes/CreateSurveyDto.html","title":"class - CreateSurveyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSurveyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/surveys/dto/surveyDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                questions\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/surveys/dto/surveyDto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        questions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QuestionType[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested({each: true})@ArrayMinSize(1)@ArrayMaxSize(15)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/surveys/dto/surveyDto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/surveys/dto/surveyDto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  ArrayMinSize,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested,\n} from 'class-validator';\n\nexport class CreateSurveyDto {\n  @IsNotEmpty()\n  name: string;\n\n  @ValidateNested({ each: true })\n  @ArrayMinSize(1)\n  @ArrayMaxSize(15)\n  @Type(() => QuestionType)\n  questions: QuestionType[];\n\n  @IsNumber()\n  user_id: number;\n}\n\nexport class FindAllSurveyDto {\n  survey_name?: string;\n  user_name?: string;\n}\n\nexport class QuestionType {\n  question: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MaxLength(100, {message: 'maximum length is 100 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, MaxLength } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @MaxLength(100, { message: 'maximum length is 100 characters' })\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllSurveyDto.html":{"url":"classes/FindAllSurveyDto.html","title":"class - FindAllSurveyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllSurveyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/surveys/dto/surveyDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                survey_name\n                            \n                            \n                                    Optional\n                                user_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        survey_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/surveys/dto/surveyDto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/surveys/dto/surveyDto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  ArrayMinSize,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested,\n} from 'class-validator';\n\nexport class CreateSurveyDto {\n  @IsNotEmpty()\n  name: string;\n\n  @ValidateNested({ each: true })\n  @ArrayMinSize(1)\n  @ArrayMaxSize(15)\n  @Type(() => QuestionType)\n  questions: QuestionType[];\n\n  @IsNumber()\n  user_id: number;\n}\n\nexport class FindAllSurveyDto {\n  survey_name?: string;\n  user_name?: string;\n}\n\nexport class QuestionType {\n  question: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtUserGuard.html":{"url":"guards/JwtUserGuard.html","title":"guard - JwtUserGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtUserGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/users/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class JwtUserGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    try {\n      const req = context.switchToHttp().getRequest();\n\n      const authHeader = req.headers.authorization;\n      const bearer = authHeader.split(' ')[0];\n      const token = authHeader.split(' ')[1];\n\n      if (bearer !== 'bearer' || !token) {\n        throw new UnauthorizedException({ message: 'user is not authorized' });\n      }\n\n      const user = this.jwtService.verify(token, {\n        secret: process.env.SECRET,\n      });\n      req.user = user;\n\n      return true;\n    } catch (e) {\n      console.log(e);\n      throw new UnauthorizedException({\n        message: 'user is not authorized error',\n      });\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Option.html":{"url":"classes/Option.html","title":"class - Option","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Option\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/option.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                option\n                            \n                            \n                                question\n                            \n                            \n                                question_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, autoIncrement: true, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/option.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/option.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/option.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Question } from './question.entity';\n\ninterface OptionCreationAttrs {\n  option: string;\n  question_id: number;\n}\n\n@Table({ tableName: 'options' })\nexport class Option extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, allowNull: false })\n  option: string;\n\n  @BelongsTo(() => Question)\n  question: Question;\n\n  @ForeignKey(() => Question)\n  question_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OptionCreationAttrs.html":{"url":"interfaces/OptionCreationAttrs.html","title":"interface - OptionCreationAttrs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OptionCreationAttrs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/option.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            option\n                                        \n                                \n                                \n                                        \n                                            question_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        option\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        option:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        question_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        question_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Question } from './question.entity';\n\ninterface OptionCreationAttrs {\n  option: string;\n  question_id: number;\n}\n\n@Table({ tableName: 'options' })\nexport class Option extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, allowNull: false })\n  option: string;\n\n  @BelongsTo(() => Question)\n  question: Question;\n\n  @ForeignKey(() => Question)\n  question_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/question.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                options\n                            \n                            \n                                question\n                            \n                            \n                                survey\n                            \n                            \n                                survey_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, autoIncrement: true, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/question.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Option[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/question.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/question.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        survey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Survey\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/question.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        survey_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/question.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  HasMany,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Option } from './option.entity';\nimport { Survey } from './survey.entity';\n\ninterface QuestionCreationAttrs {\n  question: string;\n  survey_id: number;\n}\n\n@Table({ tableName: 'questions' })\nexport class Question extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, allowNull: false })\n  question: string;\n\n  @BelongsTo(() => Survey)\n  survey: Survey;\n\n  @ForeignKey(() => Survey)\n  survey_id: number;\n\n  @HasMany(() => Option)\n  options: Option[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuestionCreationAttrs.html":{"url":"interfaces/QuestionCreationAttrs.html","title":"interface - QuestionCreationAttrs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuestionCreationAttrs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/question.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            question\n                                        \n                                \n                                \n                                        \n                                            survey_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        question\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        question:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        survey_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        survey_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  HasMany,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Option } from './option.entity';\nimport { Survey } from './survey.entity';\n\ninterface QuestionCreationAttrs {\n  question: string;\n  survey_id: number;\n}\n\n@Table({ tableName: 'questions' })\nexport class Question extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, allowNull: false })\n  question: string;\n\n  @BelongsTo(() => Survey)\n  survey: Survey;\n\n  @ForeignKey(() => Survey)\n  survey_id: number;\n\n  @HasMany(() => Option)\n  options: Option[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QuestionType.html":{"url":"classes/QuestionType.html","title":"class - QuestionType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QuestionType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/surveys/dto/surveyDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/surveys/dto/surveyDto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/surveys/dto/surveyDto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  ArrayMaxSize,\n  ArrayMinSize,\n  IsNotEmpty,\n  IsNumber,\n  ValidateNested,\n} from 'class-validator';\n\nexport class CreateSurveyDto {\n  @IsNotEmpty()\n  name: string;\n\n  @ValidateNested({ each: true })\n  @ArrayMinSize(1)\n  @ArrayMaxSize(15)\n  @Type(() => QuestionType)\n  questions: QuestionType[];\n\n  @IsNumber()\n  user_id: number;\n}\n\nexport class FindAllSurveyDto {\n  survey_name?: string;\n  user_name?: string;\n}\n\nexport class QuestionType {\n  question: string;\n  options: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Survey.html":{"url":"classes/Survey.html","title":"class - Survey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Survey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/survey.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                question\n                            \n                            \n                                user\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, autoIncrement: true, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/survey.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/survey.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Question[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/survey.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/survey.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/survey.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  HasMany,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Question } from './question.entity';\nimport { User } from './user.entity';\n\ninterface SurveyCreationAttrs {\n  name: string;\n}\n\n@Table({ tableName: 'surveys' })\nexport class Survey extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, allowNull: false })\n  name: string;\n\n  @BelongsTo(() => User)\n  user: User;\n\n  @ForeignKey(() => User)\n  user_id: number;\n\n  @HasMany(() => Question)\n  question: Question[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SurveyCreationAttrs.html":{"url":"interfaces/SurveyCreationAttrs.html","title":"interface - SurveyCreationAttrs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SurveyCreationAttrs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/survey.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  HasMany,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Question } from './question.entity';\nimport { User } from './user.entity';\n\ninterface SurveyCreationAttrs {\n  name: string;\n}\n\n@Table({ tableName: 'surveys' })\nexport class Survey extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, allowNull: false })\n  name: string;\n\n  @BelongsTo(() => User)\n  user: User;\n\n  @ForeignKey(() => User)\n  user_id: number;\n\n  @HasMany(() => Question)\n  question: Question[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SurveysController.html":{"url":"controllers/SurveysController.html","title":"controller - SurveysController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SurveysController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/surveys/surveys.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                surveys\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createSurveyDto: CreateSurveyDto, user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtUserGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/surveys/surveys.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createSurveyDto\n                                    \n                                                CreateSurveyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(findAllSurveyDto: FindAllSurveyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/surveys/surveys.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    findAllSurveyDto\n                                    \n                                                FindAllSurveyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/surveys/surveys.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/surveys/surveys.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { SurveysService } from './surveys.service';\nimport { CreateSurveyDto, FindAllSurveyDto } from './dto/surveyDto';\nimport { User } from 'src/shared/user-auth.decorator';\nimport { JwtUserGuard } from 'src/users/auth.guard';\n\n@Controller('surveys')\nexport class SurveysController {\n  constructor(private readonly surveysService: SurveysService) {}\n\n  @UseGuards(JwtUserGuard)\n  @Post()\n  create(@Body() createSurveyDto: CreateSurveyDto, @User() user: any) {\n    createSurveyDto.user_id = user.id;\n    return this.surveysService.create(createSurveyDto);\n  }\n\n  @Get()\n  findAll(@Body() findAllSurveyDto: FindAllSurveyDto) {\n    return this.surveysService.findAll(findAllSurveyDto);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.surveysService.findOne(+id);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.surveysService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SurveysModule.html":{"url":"modules/SurveysModule.html","title":"module - SurveysModule","body":"\n                   \n\n\n\n\n    Modules\n    SurveysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SurveysModule\n\n\n\ncluster_SurveysModule_providers\n\n\n\n\nSurveysService\n\nSurveysService\n\n\n\nSurveysModule\n\nSurveysModule\n\nSurveysModule -->\n\nSurveysService->SurveysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/surveys/surveys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SurveysService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SurveysController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SurveysService } from './surveys.service';\nimport { SurveysController } from './surveys.controller';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Question } from 'src/entities/question.entity';\nimport { Survey } from 'src/entities/survey.entity';\nimport { Option } from 'src/entities/option.entity';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [SequelizeModule.forFeature([Survey, Option, Question]), JwtModule],\n  controllers: [SurveysController],\n  providers: [SurveysService],\n})\nexport class SurveysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SurveysService.html":{"url":"injectables/SurveysService.html","title":"injectable - SurveysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SurveysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/surveys/surveys.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(surveyRepository, questionRepository, optionRepository)\n                    \n                \n                        \n                            \n                                Defined in src/surveys/surveys.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        surveyRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        questionRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        optionRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createSurveyDto: CreateSurveyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/surveys/surveys.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createSurveyDto\n                                    \n                                                CreateSurveyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(options: FindAllSurveyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/surveys/surveys.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindAllSurveyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/surveys/surveys.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/surveys/surveys.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Option } from 'src/entities/option.entity';\nimport { Question } from 'src/entities/question.entity';\nimport { Survey } from 'src/entities/survey.entity';\nimport { User } from 'src/entities/user.entity';\nimport {\n  QuestionType,\n  CreateSurveyDto,\n  FindAllSurveyDto,\n} from './dto/surveyDto';\n\n@Injectable()\nexport class SurveysService {\n  constructor(\n    @InjectModel(Survey) private surveyRepository: typeof Survey,\n    @InjectModel(Question) private questionRepository: typeof Question,\n    @InjectModel(Option) private optionRepository: typeof Option,\n  ) {}\n\n  async create(createSurveyDto: CreateSurveyDto) {\n    const survey = await this.surveyRepository.create(createSurveyDto);\n\n    createSurveyDto.questions.forEach(async (q: QuestionType) => {\n      const question = await this.questionRepository.create({\n        question: q.question,\n        survey_id: survey.id,\n      });\n\n      q.options.forEach(async (option: string) => {\n        await this.optionRepository.create({\n          option,\n          question_id: question.id,\n        });\n      });\n    });\n\n    return survey;\n  }\n\n  async findAll(options: FindAllSurveyDto) {\n    if (options.survey_name && options.user_name) {\n      return await this.surveyRepository.findAll({\n        include: [\n          {\n            model: User,\n            where: {\n              name: options.user_name,\n            },\n            required: true,\n            attributes: ['name'],\n          },\n        ],\n        where: {\n          name: options.survey_name,\n        },\n        attributes: ['name', 'id'],\n      });\n    }\n\n    if (options.user_name) {\n      return await this.surveyRepository.findAll({\n        include: [\n          {\n            model: User,\n            required: true,\n            where: {\n              name: options.user_name,\n            },\n            attributes: ['name'],\n          },\n        ],\n        attributes: ['id', 'name'],\n      });\n    }\n\n    if (options.survey_name) {\n      return await this.surveyRepository.findAll({\n        where: { name: options.survey_name },\n        attributes: ['id', 'name'],\n      });\n    }\n\n    return await this.surveyRepository.findAll({\n      include: [{ model: User, attributes: ['name'] }],\n      attributes: ['id', 'name'],\n    });\n  }\n\n  async findOne(id: number) {\n    const survey = await this.surveyRepository.findOne({\n      where: {\n        id,\n      },\n    });\n\n    const questions = await this.questionRepository.findAll({\n      where: { survey_id: survey.id },\n      include: { model: Option },\n    });\n\n    return {\n      survey_name: survey.name,\n      survey_id: survey.id,\n      questions,\n    };\n  }\n\n  remove(id: number) {\n    return this.surveyRepository.destroy({ where: { id }, cascade: true });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, allowNull: false, validate: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, autoIncrement: true, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, DataType, Model, Table } from 'sequelize-typescript';\n\ninterface UserCreatingAttrs {\n  name: string;\n  password: string;\n  email: string;\n}\n\n@Table({ tableName: 'users' })\nexport class User extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, unique: true, allowNull: false })\n  name: string;\n\n  @Column({\n    type: DataType.STRING,\n    unique: true,\n    allowNull: false,\n    validate: {\n      isEmail: { msg: 'It must be a valid Email address' },\n    },\n  })\n  email: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserCreatingAttrs.html":{"url":"interfaces/UserCreatingAttrs.html","title":"interface - UserCreatingAttrs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserCreatingAttrs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Column, DataType, Model, Table } from 'sequelize-typescript';\n\ninterface UserCreatingAttrs {\n  name: string;\n  password: string;\n  email: string;\n}\n\n@Table({ tableName: 'users' })\nexport class User extends Model {\n  @Column({\n    type: DataType.INTEGER,\n    unique: true,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number;\n\n  @Column({ type: DataType.STRING, unique: true, allowNull: false })\n  name: string;\n\n  @Column({\n    type: DataType.STRING,\n    unique: true,\n    allowNull: false,\n    validate: {\n      isEmail: { msg: 'It must be a valid Email address' },\n    },\n  })\n  email: string;\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post('/create')\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Post('/login')\n  login(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.login(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { User } from '../entities/user.entity';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([User]),\n    JwtModule.register({\n      secret: process.env.SECRET,\n      signOptions: {\n        expiresIn: '24h',\n      },\n    }),\n  ],\n  exports: [JwtModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                generateJwt\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateJwt\n                        \n                    \n                \n            \n            \n                \ngenerateJwt(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { User } from '../entities/user.entity';\nimport * as bcrypt from 'bcrypt';\n\nimport { Op } from 'sequelize';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User) private userRepository: typeof User,\n    private jwtService: JwtService,\n  ) {}\n  async create(createUserDto: CreateUserDto) {\n    const doesUserExist = await this.userRepository.findOne({\n      where: {\n        [Op.or]: [{ email: createUserDto.email }, { name: createUserDto.name }],\n      },\n    });\n\n    if (doesUserExist) {\n      throw new HttpException('user already exists', HttpStatus.BAD_REQUEST);\n    }\n\n    const salt = await bcrypt.genSalt();\n    createUserDto.password = await bcrypt.hash(createUserDto.password, salt);\n\n    const user = await this.userRepository.create(createUserDto);\n    const token = this.generateJwt(user);\n\n    return token;\n  }\n\n  async login(createUserDto: CreateUserDto) {\n    const user: User = await this.userRepository.findOne({\n      where: {\n        [Op.or]: [{ email: createUserDto.email }, { name: createUserDto.name }],\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('User does not exist', HttpStatus.BAD_REQUEST);\n    }\n\n    const isValidPassword = await bcrypt.compare(\n      createUserDto.password,\n      user.password,\n    );\n\n    if (!isValidPassword) {\n      throw new HttpException('Incorrect password', HttpStatus.BAD_REQUEST);\n    }\n\n    const token = this.generateJwt(user);\n\n    return token;\n  }\n\n  generateJwt(user: User) {\n    const payload = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n    };\n\n    return this.jwtService.sign(payload, { secret: process.env.SECRET });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/answers/answers.controller.ts\n            \n            controller\n            AnswersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/answers/answers.service.ts\n            \n            injectable\n            AnswersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/answers/dto/create-answer.dto.ts\n            \n            class\n            AnswerType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/answers/dto/create-answer.dto.ts\n            \n            class\n            CreateAnswerDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/answers/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/answer.entity.ts\n            \n            class\n            Answer\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entities/answer.entity.ts\n            \n            interface\n            AnswerCreationAttrs\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/option.entity.ts\n            \n            class\n            Option\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/option.entity.ts\n            \n            interface\n            OptionCreationAttrs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entities/question.entity.ts\n            \n            interface\n            QuestionCreationAttrs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entities/survey.entity.ts\n            \n            class\n            Survey\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entities/survey.entity.ts\n            \n            interface\n            SurveyCreationAttrs\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            interface\n            UserCreatingAttrs\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/user-auth.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/surveys/dto/surveyDto.ts\n            \n            class\n            CreateSurveyDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/surveys/dto/surveyDto.ts\n            \n            class\n            FindAllSurveyDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/surveys/dto/surveyDto.ts\n            \n            class\n            QuestionType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/surveys/surveys.controller.ts\n            \n            controller\n            SurveysController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/surveys/surveys.service.ts\n            \n            injectable\n            SurveysService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/auth.guard.ts\n            \n            guard\n            JwtUserGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/sequelize : ^9.0.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.3\n        \n            pg : ^8.8.0\n        \n            postgres : ^3.3.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sequelize : ^6.25.3\n        \n            sequelize-typescript : ^2.1.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnswersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SurveysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AnswersModule\n\n\n\ncluster_AnswersModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_SurveysModule\n\n\n\ncluster_SurveysModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnswersService\n\nAnswersService\n\n\n\nAnswersModule\n\nAnswersModule\n\nAnswersModule -->\n\nAnswersService->AnswersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnswersModule->AppModule\n\n\n\n\n\nSurveysModule\n\nSurveysModule\n\nAppModule -->\n\nSurveysModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nSurveysService\n\nSurveysService\n\nSurveysModule -->\n\nSurveysService->SurveysModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            User   (src/.../user-auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/user-auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
